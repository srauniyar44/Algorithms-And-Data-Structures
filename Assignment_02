Binary Search:
def binary_search(arr, target):
    low, high = 0, len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1

Strassenâ€™s Matrix Multiplication (simplified):
# For 2x2 matrices for simplicity
def strassen(A, B):
    M1 = (A[0][0] + A[1][1]) * (B[0][0] + B[1][1])
    M2 = (A[1][0] + A[1][1]) * B[0][0]
    M3 = A[0][0] * (B[0][1] - B[1][1])
    M4 = A[1][1] * (B[1][0] - B[0][0])
    M5 = (A[0][0] + A[0][1]) * B[1][1]
    M6 = (A[1][0] - A[0][0]) * (B[0][0] + B[0][1])
    M7 = (A[0][1] - A[1][1]) * (B[1][0] + B[1][1])
    C11 = M1 + M4 - M5 + M7
    C12 = M3 + M5
    C21 = M2 + M4
    C22 = M1 - M2 + M3 + M6
    return [[C11, C12], [C21, C22]]

